#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 183 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 89 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 16 #"Source Code Pro\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 0 64 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 158 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 211 72 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 150 255 0
0 0 -1 -1 88 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 250 128 114
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 128 128 0
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 169 169 169
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 169 169 169
224 255 255 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 8 #"Verdana\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 48 96 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 4370 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         145 21           0 0           0 23 0 14 3 6 #"Julian"
0 0 24 3 1 #" "
0 0 14 3 8 #"Casta\303\261o"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 7 #"1625743"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Santiago"
0 0 24 3 1 #" "
0 0 14 3 8 #"Quintero"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 7 #"1631430"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"Juan"
0 0 24 3 1 #" "
0 0 14 3 7 #"Rend\303\263n"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 7 #"1623049"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";************************************"
0 9          13 17           0 0           0 1 0 26 3 16
#"#INTERPRETADOR_1"
0           0 0 0 17 3 36 #"************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";<program>"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";            ::="
0 0 17 3 1 #" "
0 0 17 3 24 #"<expression> (a-program)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";<expression>"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";            ::="
0 0 17 3 1 #" "
0 0 17 3 17 #"<bool-expression>"
0 0 17 3 2 #" ("
0 0 17 3 9 #"bool-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";            ::= <identificador> (var-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";            ::= <numero-expression> (num-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";            ::= <cadena> (cadena-exp)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 32 #";Primitivas Binarias y Unitarias"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";            ::= <primitive> \"(\" <expression> <expresion> \")\" (p"
 #"rim-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";            ::= <primitive-un> \"(\" <expression> \")\") (prim-exp-"
 #"un)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";            ;Condicionales y estructuras de control"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";            ::= \"if\" <expression> \"{\" \"then\" <expression> \"e"
 #"lse\" <expression> \"}\"  (if-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 128
(
 #";            ::= \"for\" \"(\" <identificador> \"=\" <expression> \""
 #";\" <expression> \";\" <expression> \")\" \"{\" <expression> \"}\" ("
 #"for-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";            ::= \"print\""
0 0 17 3 1 #" "
0 0 17 3 38 #"\"(\" <expression>* (,) \")\"  (print-exp)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";            ;Funciones y Recursividad"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";            ::= \"let\" (<identificador> \"=\" expression (,)*)* \""
 #"in\" <expression> (let-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";            ::= \"letrec\""
0 0 17 3 30 #" (<identificador> \"(\" (,) \")\" "
0 0 17 3 3 #"\"=\""
0 0 17 3 17 #" <expression>)*  "
0 0 17 3 4 #"\"in\""
0 0 17 3 29 #" <expression> (letrec-exp)   "
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";            ::= \"call\" <identif"
 #"icador> \"(\" <expression> * (,) \")\" (call-exp)"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";            ::= \"func\" "
0 0 17 3 27 #"\"(\" <identificador> (,) \")\""
0 0 17 3 29 #" \"in\" <expression> (func-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";<numero-exp>"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";               ::= decimal (decimal-num)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 21 #"::= octal (octal-num)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 25 #"::= hexadecimal (hex-num)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 24 #"::= flotante (float-num)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";<bool-expresion>"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 19 #"::= true (true-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 21 #"::= false (false-exp)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";<primitive> "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 16 #"::= + (sum-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 18 #"::= - (minus-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 17 #"::= * (mult-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";               ::= / (div-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 19 #"::= & (concat-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 18 #"::= < (menor-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 18 #"::= > (mayor-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 24 #"::= <= (menorigual-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 24 #"::= >= (mayorigual-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 22 #"::= != (diferent-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 18 #"::= ==(igual-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 18 #"::= and (and-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 16 #"::= or (or-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";               ::= / (div-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";               ::= % (percent-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";<primitive-un> "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 24 #"::= length (length-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 18 #"::= not (not-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 14 #"::= add1 (add)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 14 #"::= sub1 (sub)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";************************************"
0 9          13 17           0 0           0 1 0 26 3 7 #"#LEXICO"
0           0 0 0 17 3 36 #"************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexico"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 7 #"decimal"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"decimal"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"octal"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 4 #"\"0x\""
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"octal"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"0x\""
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"hexadecimal"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 4 #"\"hx\""
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"8\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"9\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"F\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #"("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"8\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"9\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"F\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"hexadecimal"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"hx\""
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"8\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"9\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"F\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #"("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"8\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"9\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"D\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"E\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"F\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"flotante"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"flotante"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"comentario"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"$\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"identificador"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"?\""
0 0 24 3 3 #")) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"cadena"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #")("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #"))"
0 0 19 3 4 #"\"\\\"\""
0 0 24 3 2 #") "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"white-sp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";************************************"
0 9          13 17           0 0           0 1 0 26 3 10 #"#GRAMATICA"
0           0 0 0 17 3 36 #"************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 7 #"program"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"a-program"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";Expresiones Simples"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 17 #"numero-expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"num-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 15 #"bool-expression"
0 0 24 3 2 #") "
0 0 14 3 8 #"bool-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 13 #"identificador"
0 0 24 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadena"
0 0 24 3 2 #") "
0 0 14 3 10 #"cadena-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 32 #";Primitivas Binarias y Unitarias"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 8 #"prim-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 2 #"\")"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 11 #"prim-exp-un"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 40 #";;Condicionales y estructuras de control"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"if"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"else"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"}"
0 0 19 3 1 #"\""
0 0 24 3 3 #" ) "
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"for\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"="
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"for-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"print\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #" ) "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 9 #"print-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 25 #";Funciones y Recursividad"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"let\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #")) "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"let-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"letrec\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")  "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")  "
0 0 14 3 10 #"letrec-exp"
0 0 24 3 123
(
 #")                                                                   "
 #"                                                       "
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"func\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #")"
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 8 #"func-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"call\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"  "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 8 #"call-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 53 #";bool-expression: Representa las primitivas booleanas"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"bool-expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"true\""
0 0 24 3 2 #") "
0 0 14 3 8 #"true-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"bool-expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"false\""
0 0 24 3 2 #") "
0 0 14 3 9 #"false-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 56 #";numero-expression: Representa las primitivas de numeros"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"numero-expression"
0 0 24 3 2 #" ("
0 0 14 3 7 #"decimal"
0 0 24 3 2 #") "
0 0 14 3 11 #"decimal-num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"numero-expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"octal"
0 0 24 3 2 #") "
0 0 14 3 9 #"octal-num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"numero-expression"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hexadecimal"
0 0 24 3 2 #") "
0 0 14 3 7 #"hex-num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"numero-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flotante"
0 0 24 3 2 #") "
0 0 14 3 9 #"float-num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 21 #";;Primitivas Binarias"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #") "
0 0 14 3 8 #"sum-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #") "
0 0 14 3 10 #"minus-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #") "
0 0 14 3 9 #"mult-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"/\""
0 0 24 3 2 #") "
0 0 14 3 8 #"div-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"&\""
0 0 24 3 2 #") "
0 0 14 3 11 #"concat-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #") "
0 0 14 3 10 #"menor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\">\""
0 0 24 3 2 #") "
0 0 14 3 10 #"mayor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"<=\""
0 0 24 3 2 #") "
0 0 14 3 15 #"menorigual-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\">=\""
0 0 24 3 2 #") "
0 0 14 3 15 #"mayorigual-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"==\""
0 0 24 3 2 #") "
0 0 14 3 10 #"igual-prim"
0 0 24 3 4 #")   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"and\""
0 0 24 3 2 #") "
0 0 14 3 8 #"and-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"or\""
0 0 24 3 2 #") "
0 0 14 3 7 #"or-prim"
0 0 24 3 5 #")    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #") "
0 0 14 3 12 #"percent-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"!=\""
0 0 24 3 2 #") "
0 0 14 3 13 #"diferent-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";;Primitivas Unitarias"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"length\""
0 0 24 3 2 #") "
0 0 14 3 11 #"length-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"not\""
0 0 24 3 2 #") "
0 0 14 3 8 #"not-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"add1\""
0 0 24 3 2 #") "
0 0 14 3 3 #"add"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"sub1\""
0 0 24 3 2 #") "
0 0 14 3 3 #"sub"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";Construidos autom\303\241ticamente:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexico"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexico"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";El FrontEnd (An\303\241lisis l\303\251xico (scanner) y sint\303\241"
 #"ctico (parser) integrados)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexico"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";El Analizador L\303\251xico (Scanner)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexico"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";El Interpretador (FrontEnd + Evaluaci\303\263n + se\303\261al para "
 #"lectura )"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"interpretador"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"sllgen:make-rep-loop"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"::::.\""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-program"
0 0 24 3 2 #"  "
0 0 14 3 3 #"pgm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 25 #"sllgen:make-stream-parser"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"lexico"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 9 #"gramatica"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 35 #";eval-program: <programa> -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 106
(
 #"; funci\303\263n que eval\303\272a un programa teniendo en cuenta un"
 #" ambiente dado (se inicializa dentro del programa)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"eval-program"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"a-program"
0 0 24 3 2 #" ("
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 8 #"init-env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";eval-expression: <expression> <enviroment> -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; evalua la expresi\303\263n en el ambiente de entrada"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"num-exp"
0 0 24 3 2 #" ("
0 0 14 3 17 #"numero-expression"
0 0 24 3 3 #") ("
0 0 14 3 14 #"eval-num-expre"
0 0 24 3 1 #" "
0 0 14 3 17 #"numero-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 13 #"identificador"
0 0 24 3 3 #") ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"bool-exp"
0 0 24 3 2 #" ("
0 0 14 3 15 #"bool-expression"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-bool-expre"
0 0 24 3 1 #" "
0 0 14 3 15 #"bool-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"cadena-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cadena"
0 0 24 3 3 #") ("
0 0 14 3 11 #"cleanstring"
0 0 24 3 1 #" "
0 0 14 3 6 #"cadena"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 24 3 2 #" ("
0 0 14 3 8 #"test-exp"
0 0 24 3 1 #" "
0 0 14 3 8 #"true-exp"
0 0 24 3 1 #" "
0 0 14 3 9 #"false-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"test-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"true-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"false-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"let-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-rands"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"print-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"for-each"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 3 #") ("
0 0 14 3 17 #"eopl:pretty-print"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 4 #"vals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"'"
0 0 14 3 3 #"nil"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"for-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-value"
0 0 24 3 1 #" "
0 0 14 3 11 #"conditional"
0 0 24 3 1 #" "
0 0 14 3 9 #"iteration"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"let*"
0 0 24 3 1 #"("
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 7 #"new-env"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 5 #"stop?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 11 #"conditional"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 9 #"new-value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"iteration"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 5 #"stop?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"'"
0 0 14 3 4 #"nill"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 7 #"for-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"num-exp"
0 0 24 3 1 #"("
0 0 14 3 11 #"decimal-num"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-value"
0 0 24 3 3 #")) "
0 0 14 3 11 #"conditional"
0 0 24 3 1 #" "
0 0 14 3 9 #"iteration"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 7 #") )))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"prim-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 6 #"expre1"
0 0 24 3 1 #" "
0 0 14 3 6 #"expre2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 15 #"apply-primitive"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"expre1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 4 #"prim"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"expre2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"prim-exp-un"
0 0 24 3 1 #"("
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 6 #"expre1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 18 #"apply-primitive-un"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"expre1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"func-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"call-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-rands"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Attempt"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 5 #"apply"
0 0 19 3 1 #" "
0 0 19 3 13 #"non-procedure"
0 0 19 3 4 #" ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"letrec-exp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 22 #"extend-env-recursively"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";************************************"
0 9          13 17           0 0           0 1 0 26 3 24
#"#FUNCIONES_DE_EVALUACION"
0           0 0 0 17 3 36 #"************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; cleanstring: string -> result"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;Funcion que limpia caracteres externos de un string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"cleanstring"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #"; funciones auxiliares para encontrar la posici\303\263n de un s\303"
 #"\255mbolo"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #"; en la lista de s\303\255mbolos de unambiente"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"list-find-position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"list-index"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sym1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 3 #")) "
0 0 14 3 3 #"los"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"list-index-r"
0 0 24 3 2 #" ("
0 0 14 3 10 #"list-index"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#f"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; funciones auxiliares para aplicar eval-expression a cada elemento "
 #"de una "
) 0 0 24 29 1 #"\n"
0 0 17 3 35 #"; lista de operandos (expressiones)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"eval-rands"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 9 #"eval-rand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 5 #"rands"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"eval-rand"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";apply-primitive: <primitiva> <list-of-expression> -> simple-value"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";Funcion que aplica las primitivas binarias"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"apply-primitive"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"sum-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"minus-prim"
0 0 24 3 6 #" ()  ("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"mult-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"div-prim"
0 0 24 3 5 #" () ("
0 0 14 3 14 #"exact->inexact"
0 0 24 3 1 #"("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"concat-prim"
0 0 24 3 5 #" () ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 5 #"))   "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"menor-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"mayor-prim"
0 0 24 3 6 #" ()  ("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"menorigual-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"mayorigual-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"diferent-prim"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"igual-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"operar"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 8 #"))      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"and-prim"
0 0 24 3 6 #" ()  ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"or-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 7 #"))     "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"percent-prim"
0 0 24 3 5 #" () ("
0 0 14 3 14 #"exact->inexact"
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression2"
0 0 24 3 1 #")"
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #";apply-primitive-un: <primitiva> <expression> -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";Funcion que aplica las primitivas unitarias"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"apply-primitive-un"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 12 #"primitive-un"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"sub"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"length-prim"
0 0 24 3 5 #" () ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"add"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"not-prim"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";Funciones para operar en base hexadecimal"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operaHex"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#x\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"operaHexNeg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"#x-\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"d->h"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"dec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"digitos"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"0123456789ABCDEF\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 2 #"15"
0 0 24 3 2 #")("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->h"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 3 #"))("
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"digitos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"hx\""
0 0 24 3 1 #"("
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"digitos"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 4 #")))("
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"digitos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 8 #"))))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";Funciones para operar en base octal"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operaOct"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#o\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"operaOctNeg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"#o-\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"d->o"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"dec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 2 #")("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->o"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"0x\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #"))("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 3 #"dec"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 50 #";operar: <num-exp> <primitive> <num-exp> -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";Funcion axuiliar que recibe los argumentos en notacion infija"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"operar"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"operador1"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 29 #";Operacion decimal y flotante"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 2 #")("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #"))("
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 22 #";Operacion hexadecimal"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\h"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\h"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"d->h"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"#\\h"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\h"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"d->h"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\h"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"#\\h"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"d->h"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaHex"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"#\\h"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"#\\h"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"d->h"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaHexNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 16 #";Operacion octal"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"d->o"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->o"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 8 #")))))])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"d->o"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->o"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"#\\0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"d->o"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->o"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operaOct"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"eqv?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"#\\0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 2 #")("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"signo"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"d->o"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"d->o"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"signo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"operaOctNeg"
0 0 24 3 1 #" "
0 0 14 3 9 #"operador2"
0 0 24 3 8 #"))])])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";************************************"
0 9          13 17           0 0           0 1 0 26 3 10 #"#AMBIENTES"
0           0 0 0 17 3 36 #"************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";definici\303\263n del tipo de dato ambiente"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"vals"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 31 #"recursively-extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"idss"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 6 #"bodies"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";scheme-value?: <expression> -> #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";empty-env:      -> enviroment"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";funci\303\263n que crea un ambiente vac\303\255o"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 9 #")))      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";extend-env: <list-of symbols> <list-of numbers> enviroment -> envir"
 #"oment"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";funci\303\263n que crea un ambiente extendido"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"extend-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 119
(
 #";extend-env-recursively: <list-of symbols> <list-of <list-of symbols"
 #">> <list-of expressions> environment -> environment"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";funci\303\263n que crea un ambiente extendido para procedimientos r"
 #"ecursivos"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"extend-env-recursively"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 31 #"recursively-extended-env-record"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";apply-env: <env> <symbol>"
0 0 24 29 1 #"\n"
0 0 17 3 46
#";Funci\303\263n que busca un s\303\255mbolo en un ambiente"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"empty-env"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"No binding for ~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 18 #"list-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 31 #"recursively-extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 18 #"list-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 7 #"closure"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                      "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";Definicion de tipo de dato numero"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"eval-num-expre"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 17 #"numero-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"decimal-num"
0 0 24 3 2 #" ("
0 0 14 3 7 #"decimal"
0 0 24 3 2 #") "
0 0 14 3 7 #"decimal"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"octal-num"
0 0 24 3 2 #" ("
0 0 14 3 5 #"octal"
0 0 24 3 2 #") "
0 0 14 3 5 #"octal"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"hex-num"
0 0 24 3 2 #" ("
0 0 14 3 11 #"hexadecimal"
0 0 24 3 2 #") "
0 0 14 3 11 #"hexadecimal"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"float-num"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flotante"
0 0 24 3 2 #") "
0 0 14 3 8 #"flotante"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";Definicion de tipo de dato booleano"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-bool-expre"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 15 #"bool-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"false-exp"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"true-exp"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Ambiente inicial"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"init-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 2 #"pi"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.14"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"empty-env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 17 3 37 #";************************************"
0 9          13 17           0 0           0 1 0 26 3 15
#"#PROCEDIMIENTOS"
0           0 0 0 17 3 36 #"************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";Definicion del tipo de dato procedimiento"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"procval"
0 0 24 3 1 #" "
0 0 14 3 8 #"procval?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"closure"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";==================================================================="
 #"====================="
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";apply-procedure: evalua el cuerpo de un procedimientos en el ambien"
 #"te extendido correspondiente"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"procval"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"closure"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0

;Expresiones simples
3 ---> 3
-5 --> -5
3.5 --> 3.5
-3.5 --> 3.5
hx2 ---> "hx2"
-hx2 ---> "-hx2"
0x2 ---> "0x2"
-0x2 ---> "-0x2"
"hola" ---> "hola"
a ---> 1 (init env)


;Primitivas Unitarias y Binarias
+(2,3) ---> 5
-(5,2) ---> 3
*(2,2) ---> 4
/(7,2) ---> 3.5
%(2,1) ---> 0.02
&("hola","mundo") ---> "holamundo"
and (true,false) --->#f
or(true,false) --->#t
==(2,2) ---> #t
!=(2,2) ---> #f
>(2,3) ---> #f
<(1,2) ---> #t
<=(2,5) ---> #t
>=(2,2) ---> #t
not(false) ---> #t
length("hola") ---> 4
add1(2) ---> 3
sub1(2) ---> 1


;Condicionales y Estructuras de Control
if <(2,3){then 2 else 3} --->2
if <(2,3){then true else false} --->#t
for(x=2;<(x,5);add1(x)){x} ---> (2 (3 (4 nill)))
print(+(2,2),3) --> 4 3 nil


;Funciones y Recursividad
let A=func (pi,r) in *(pi,r) in call A(pi,3) ---> 9.42
let A=func (r) in *(2,r) in call A(3) ---> 6
letrec fact(x) = if x {then *(x, call fact(-(x,1)) else 1} in call fact(6)  ---> AUN NO FUNCIONA



